// Generated by CoffeeScript 1.9.3
(function() {
  var Pr;

  Pr = (function() {
    function Pr(repo, number, client) {
      this.repo = repo;
      this.number = number;
      this.client = client;
    }

    Pr.prototype.info = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr info error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.update = function(obj, cb) {
      return this.client.post("/repos/" + this.repo + "/pulls/" + this.number, obj, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr update error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.close = function(cb) {
      return this.update({
        state: 'closed'
      }, cb);
    };

    Pr.prototype.merged = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/merge", function(err, s, b, h) {
        if (err && err.message === 'null') {
          return cb(null, false);
        }
        return cb(null, s === 204, h);
      });
    };

    Pr.prototype.merge = function(msg, cb) {
      var commit;
      commit = {
        commit_message: msg
      };
      return this.client.put("/repos/" + this.repo + "/pulls/" + this.number + "/merge", commit, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr merge error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.commits = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/commits", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr commits error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.comments = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/comments", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr comments error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Pr.prototype.files = function(cb) {
      return this.client.get("/repos/" + this.repo + "/pulls/" + this.number + "/files", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Pr files error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    return Pr;

  })();

  module.exports = Pr;

}).call(this);
