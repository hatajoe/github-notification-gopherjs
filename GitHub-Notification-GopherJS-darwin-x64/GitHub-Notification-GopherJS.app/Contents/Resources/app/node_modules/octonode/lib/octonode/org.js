// Generated by CoffeeScript 1.9.3
(function() {
  var Org,
    slice = [].slice;

  Org = (function() {
    function Org(name, client) {
      this.name = name;
      this.client = client;
    }

    Org.prototype.info = function(cb) {
      return this.client.get("/orgs/" + this.name, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Org info error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.update = function(info, cb) {
      return this.client.post("/orgs/" + this.name, info, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Org update error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.repo = function(nameOrRepo, cb) {
      if (typeof cb === 'function' && typeof nameOrRepo === 'object') {
        return this.createRepo(nameOrRepo, cb);
      } else {
        return this.client.repo(this.name + "/" + nameOrRepo);
      }
    };

    Org.prototype.repos = function() {
      var cb, i, params, ref;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return (ref = this.client).get.apply(ref, ["/orgs/" + this.name + "/repos"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Org repos error'));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    Org.prototype.createRepo = function(repo, cb) {
      return this.client.post("/orgs/" + this.name + "/repos", repo, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error('Org createRepo error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.teams = function() {
      var cb, i, params, ref;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return (ref = this.client).get.apply(ref, ["/orgs/" + this.name + "/teams"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Org teams error'));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    Org.prototype.members = function() {
      var cb, i, params, ref;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return (ref = this.client).get.apply(ref, ["/orgs/" + this.name + "/members"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Org members error'));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    Org.prototype.membership = function(user, cb) {
      return this.client.getOptions("/orgs/" + this.name + "/memberships/" + user, {
        headers: {
          Accept: 'application/vnd.github.moondragon+json'
        }
      }, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Org memberships error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.member = function(user, cb) {
      return this.client.getNoFollow("/orgs/" + this.name + "/members/" + user, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        return cb(null, s === 204, h);
      });
    };

    Org.prototype.publicMember = function(user, cb) {
      return this.client.getNoFollow("/orgs/" + this.name + "/public_members/" + user, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        return cb(null, s === 204, h);
      });
    };

    Org.prototype.publicizeMembership = function(user, cb) {
      return this.client.put("/orgs/" + this.name + "/public_members/" + user, null, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 204) {
          return cb(new Error("Org publicizeMembership error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.concealMembership = function(user, cb) {
      return this.client.del("/orgs/" + this.name + "/public_members/" + user, null, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 204) {
          return cb(new Error("Org concealMembership error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.addMember = function(user, options, cb) {
      return this.client.put("/orgs/" + this.name + "/memberships/" + user, options, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 204) {
          return cb(new Error("Org addMember error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.removeMember = function(user, cb) {
      return this.client.del("/orgs/" + this.name + "/members/" + user, null, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 204) {
          return cb(new Error("Org removeMember error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.createTeam = function(options, cb) {
      return this.client.post("/orgs/" + this.name + "/teams", options, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error('Org createTeam error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Org.prototype.addTeamRepo = function(team, repo, cb) {
      return this.client.put("/teams/" + team + "/repos/" + this.name + "/" + repo, null, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 204) {
          return cb(new Error('Org addTeamRepo error'));
        } else {
          return cb(null, b, h);
        }
      });
    };

    return Org;

  })();

  module.exports = Org;

}).call(this);
